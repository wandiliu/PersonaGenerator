var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
figma.showUI(__html__, { width: 374, height: 286 });
const male = [
    "Aaron",
    "Adam",
    "Alan",
    "Albert",
    "Alexander",
    "Andrew",
    "Anthony",
    "Arthur",
    "Austin",
    "Benjamin",
    "Billy",
    "Bobby",
    "Brandon",
    "Brian",
    "Bruce",
    "Bryan",
    "Carl",
    "Charles",
    "Christian",
    "Christopher",
    "Craig",
    "Daniel",
    "David",
    "Dennis",
    "Donald",
    "Douglas",
    "Dylan",
    "Edward",
    "Eric",
    "Ethan",
    "Eugene",
    "Frank",
    "Gary",
    "George",
    "Gerald",
    "Gregory",
    "Harold",
    "Harry",
    "Henry",
    "Howard",
    "Jack",
    "Jacob",
    "James",
    "Jason",
    "Jeffrey",
    "Jeremy",
    "Jerry",
    "Jesse",
    "Joe",
    "John",
    "Johnny",
    "Jonathan",
    "Jordan",
    "Jose",
    "Joseph",
    "Joshua",
    "Juan",
    "Justin",
    "Keith",
    "Kenneth",
    "Kevin",
    "Kyle",
    "Larry",
    "Lawrence",
    "Louis",
    "Mark",
    "Matthew",
    "Michael",
    "Nathan",
    "Nicholas",
    "Patrick",
    "Paul",
    "Peter",
    "Philip",
    "Phillip",
    "Ralph",
    "Randy",
    "Raymond",
    "Richard",
    "Robert",
    "Roger",
    "Ronald",
    "Roy",
    "Russell",
    "Ryan",
    "Samuel",
    "Scott",
    "Sean",
    "Stephen",
    "Steven",
    "Terry",
    "Thomas",
    "Timothy",
    "Tyler",
    "Vincent",
    "Walter",
    "Wayne",
    "William",
    "Willie",
    "Zachary",
];
const female = [
    "Alice",
    "Amanda",
    "Amber",
    "Amy",
    "Andrea",
    "Angela",
    "Ann",
    "Anna",
    "Ashley",
    "Barbara",
    "Betty",
    "Beverly",
    "Brenda",
    "Brittany",
    "Carol",
    "Carolyn",
    "Catherine",
    "Cheryl",
    "Christina",
    "Christine",
    "Crystal",
    "Cynthia",
    "Danielle",
    "Deborah",
    "Debra",
    "Denise",
    "Diana",
    "Diane",
    "Donna",
    "Doris",
    "Dorothy",
    "Elizabeth",
    "Emily",
    "Emma",
    "Evelyn",
    "Frances",
    "Gloria",
    "Grace",
    "Hannah",
    "Heather",
    "Helen",
    "Jacqueline",
    "Jane",
    "Janet",
    "Janice",
    "Jean",
    "Jennifer",
    "Jessica",
    "Joan",
    "Joyce",
    "Judith",
    "Judy",
    "Julia",
    "Julie",
    "Karen",
    "Katherine",
    "Kathleen",
    "Kathryn",
    "Kathy",
    "Kelly",
    "Kimberly",
    "Laura",
    "Lauren",
    "Linda",
    "Lisa",
    "Lori",
    "Madison",
    "Margaret",
    "Maria",
    "Marie",
    "Marilyn",
    "Martha",
    "Mary",
    "Megan",
    "Melissa",
    "Michelle",
    "Mildred",
    "Nancy",
    "Nicole",
    "Olivia",
    "Pamela",
    "Patricia",
    "Rachel",
    "Rebecca",
    "Rose",
    "Ruth",
    "Samantha",
    "Sandra",
    "Sara",
    "Sarah",
    "Sharon",
    "Shirley",
    "Stephanie",
    "Susan",
    "Tammy",
    "Teresa",
    "Theresa",
    "Tiffany",
    "Victoria",
    "Virginia",
];
const surname = [
    "Adams",
    "Aguilar",
    "Alexander",
    "Allen",
    "Alvarado",
    "Alvarez",
    "Anderson",
    "Andrews",
    "Armstrong",
    "Arnold",
    "Austin",
    "Bailey",
    "Baker",
    "Banks",
    "Barnes",
    "Barnett",
    "Barrett",
    "Bates",
    "Beck",
    "Bell",
    "Bennett",
    "Berry",
    "Bishop",
    "Black",
    "Bowman",
    "Boyd",
    "Bradley",
    "Brewer",
    "Brooks",
    "Brown",
    "Bryant",
    "Burke",
    "Burns",
    "Burton",
    "Butler",
    "Campbell",
    "Carlson",
    "Carpenter",
    "Carr",
    "Carroll",
    "Carter",
    "Castillo",
    "Castro",
    "Chapman",
    "Chavez",
    "Chen",
    "Clark",
    "Cole",
    "Coleman",
    "Collins",
    "Contreras",
    "Cook",
    "Cooper",
    "Cox",
    "Crawford",
    "Cruz",
    "Cunningham",
    "Curtis",
    "Daniels",
    "Davidson",
    "Davis",
    "Day",
    "Dean",
    "Delgado",
    "Diaz",
    "Dixon",
    "Douglas",
    "Duncan",
    "Dunn",
    "Edwards",
    "Elliott",
    "Ellis",
    "Estrada",
    "Evans",
    "Ferguson",
    "Fernandez",
    "Fields",
    "Fisher",
    "Flores",
    "Ford",
    "Foster",
    "Fowler",
    "Fox",
    "Franklin",
    "Freeman",
    "Fuller",
    "Garcia",
    "Gardner",
    "Garrett",
    "Garza",
    "George",
    "Gibson",
    "Gilbert",
    "Gomez",
    "Gonzales",
    "Gonzalez",
    "Gordon",
    "Graham",
    "Grant",
    "Gray",
    "Green",
    "Greene",
    "Griffin",
    "Guerrero",
    "Gutierrez",
    "Guzman",
    "Hall",
    "Hamilton",
    "Hansen",
    "Hanson",
    "Harper",
    "Harris",
    "Harrison",
    "Hart",
    "Harvey",
    "Hawkins",
    "Hayes",
    "Henderson",
    "Henry",
    "Hernandez",
    "Herrera",
    "Hicks",
    "Hill",
    "Hoffman",
    "Holland",
    "Holmes",
    "Hopkins",
    "Howard",
    "Howell",
    "Hudson",
    "Hughes",
    "Hunt",
    "Hunter",
    "Jackson",
    "Jacobs",
    "James",
    "Jenkins",
    "Jensen",
    "Jimenez",
    "Johnson",
    "Johnston",
    "Jones",
    "Jordan",
    "Keller",
    "Kelley",
    "Kelly",
    "Kennedy",
    "Kim",
    "King",
    "Knight",
    "Lane",
    "Larson",
    "Lawrence",
    "Lawson",
    "Lee",
    "Lewis",
    "Little",
    "Long",
    "Lopez",
    "Lucas",
    "Lynch",
    "Marshall",
    "Martin",
    "Martinez",
    "Mason",
    "Matthews",
    "May",
    "McCoy",
    "McDonald",
    "Medina",
    "Mendez",
    "Mendoza",
    "Meyer",
    "Miller",
    "Mills",
    "Mitchell",
    "Montgomery",
    "Moore",
    "Morales",
    "Moreno",
    "Morgan",
    "Morris",
    "Morrison",
    "Munoz",
    "Murphy",
    "Murray",
    "Myers",
    "Nelson",
    "Newman",
    "Nguyen",
    "Nichols",
    "Obrien",
    "Oliver",
    "Olson",
    "Ortega",
    "Ortiz",
    "Owens",
    "Palmer",
    "Parker",
    "Patel",
    "Patterson",
    "Payne",
    "Pearson",
    "Pena",
    "Perez",
    "Perkins",
    "Perry",
    "Peters",
    "Peterson",
    "Phillips",
    "Pierce",
    "Porter",
    "Powell",
    "Price",
    "Ramirez",
    "Ramos",
    "Ray",
    "Reed",
    "Reid",
    "Reyes",
    "Reynolds",
    "Rice",
    "Richards",
    "Richardson",
    "Riley",
    "Rios",
    "Rivera",
    "Roberts",
    "Robertson",
    "Robinson",
    "Rodriguez",
    "Rogers",
    "Romero",
    "Rose",
    "Ross",
    "Ruiz",
    "Russell",
    "Ryan",
    "Salazar",
    "Sanchez",
    "Sanders",
    "Sandoval",
    "Santos",
    "Schmidt",
    "Schneider",
    "Schultz",
    "Scott",
    "Shaw",
    "Silva",
    "Simmons",
    "Simpson",
    "Sims",
    "Smith",
    "Snyder",
    "Soto",
    "Spencer",
    "Stanley",
    "Stephens",
    "Stevens",
    "Stewart",
    "Stone",
    "Sullivan",
    "Taylor",
    "Thomas",
    "Thompson",
    "Torres",
    "Tran",
    "Tucker",
    "Turner",
    "Valdez",
    "Vargas",
    "Vasquez",
    "Wade",
    "Wagner",
    "Walker",
    "Wallace",
    "Walsh",
    "Walters",
    "Ward",
    "Warren",
    "Washington",
    "Watkins",
    "Watson",
    "Weaver",
    "Webb",
    "Weber",
    "Welch",
    "Wells",
    "West",
    "Wheeler",
    "White",
    "Williams",
    "Williamson",
    "Willis",
    "Wilson",
    "Wong",
    "Wood",
    "Woods",
    "Wright",
    "Young",
];
const images = [
    "https://i.imgur.com/6Yjoy1w.png",
    "https://i.imgur.com/VClVVJ4.png",
    "https://i.imgur.com/eM2vh3M.png",
    "https://i.imgur.com/cxzfZKs.png",
    "https://i.imgur.com/eAH8tdB.png",
    "https://i.imgur.com/bn3Q4Tg.png",
    "https://i.imgur.com/c04TKcG.png",
    "https://i.imgur.com/RHwuOdC.png",
    "https://i.imgur.com/ekGJNjX.png",
    "https://i.imgur.com/9iEhNMu.png",
];
let all = female.concat(male);
figma.ui.onmessage = (msg) => __awaiter(this, void 0, void 0, function* () {
    if (msg.type === "create-rectangles") {
        // this works
        if (msg.contentType === "names") {
            for (const node of figma.currentPage.selection) {
                if (node.type === "TEXT") {
                    let textNode = node;
                    yield figma.loadFontAsync(textNode.fontName);
                    // console.log(msg.gender);
                    node.characters = getRandomItem(msg.gender);
                }
            }
        }
        // this doesn't work
        if (msg.contentType === "avatars") {
            for (const node of figma.currentPage.selection) {
                switch (node.type) {
                    case 'RECTANGLE':
                    case 'ELLIPSE':
                    case 'POLYGON':
                    case 'STAR':
                    case 'VECTOR':
                    case 'TEXT': {
                        // Create a new array of fills, because we can't directly modify the old one
                        const url = 'https://i.imgur.com/6Yjoy1w.png';
                        const paint = yield downloadImage(url);
                        // for (const paint of node.fills) {
                        //   newFills.push(await downloadImage(url))
                        // }
                        node.fills = [paint];
                        break;
                    }
                    default: {
                        // not supported, silently do nothing
                    }
                }
            }
        }
    }
    figma.closePlugin("done.");
});
// Randomize names
function getRandomItem(gender) {
    let rand_f = Math.floor(Math.random() * Math.floor(female.length));
    let rand_a = Math.floor(Math.random() * Math.floor(all.length));
    let rand_s = Math.floor(Math.random() * Math.floor(surname.length));
    return ((gender === "F"
        ? female[rand_f]
        : gender === "M"
            ? male[rand_f]
            : all[rand_a]) +
        " " +
        surname[rand_s]);
}
// Me trying to get an image on the screen
function downloadImage(url) {
    return __awaiter(this, void 0, void 0, function* () {
        figma.showUI(__html__, { visible: false });
        figma.ui.postMessage(url);
        const newBytes = yield new Promise((resolve, reject) => {
            figma.ui.onmessage = value => resolve(value);
        });
        const newPaint = { scaleMode: 'FILL', type: 'IMAGE', imageHash: figma.createImage(newBytes).hash };
        return newPaint;
    });
}
function addAvatar() {
    return __awaiter(this, void 0, void 0, function* () {
        const url = 'https://i.imgur.com/6Yjoy1w.png';
        const avatar = figma.createEllipse();
        avatar.resize(128, 128);
        const paint = yield downloadImage(url);
        avatar.fills = [paint];
        // if (node && (node.type === "GROUP" || node.type === "FRAME")) {
        //   node.appendChild(avatar)
        // }
        return avatar;
    });
}
function createAvatars() {
    return __awaiter(this, void 0, void 0, function* () {
        if (figma.currentPage.selection.length) {
            yield Promise.all(figma.currentPage.selection.map(selected => addAvatar()));
        }
        else {
            const avatar = yield addAvatar();
            figma.currentPage.appendChild(avatar);
            figma.currentPage.selection = [avatar];
            figma.viewport.scrollAndZoomIntoView([avatar]);
        }
    });
}
